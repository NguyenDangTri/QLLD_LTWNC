#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CSDLQLLD")]
	public partial class CSDLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCongTrinh(CongTrinh instance);
    partial void UpdateCongTrinh(CongTrinh instance);
    partial void DeleteCongTrinh(CongTrinh instance);
    partial void InsertPhongBan(PhongBan instance);
    partial void UpdatePhongBan(PhongBan instance);
    partial void DeletePhongBan(PhongBan instance);
    partial void InsertNhanVien(NhanVien instance);
    partial void UpdateNhanVien(NhanVien instance);
    partial void DeleteNhanVien(NhanVien instance);
    partial void InsertPhanCong(PhanCong instance);
    partial void UpdatePhanCong(PhanCong instance);
    partial void DeletePhanCong(PhanCong instance);
    #endregion
		
		public CSDLDataContext() : 
				base(global::Server.Properties.Settings.Default.CSDLQLLDConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public CSDLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSDLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSDLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSDLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CongTrinh> CongTrinhs
		{
			get
			{
				return this.GetTable<CongTrinh>();
			}
		}
		
		public System.Data.Linq.Table<PhongBan> PhongBans
		{
			get
			{
				return this.GetTable<PhongBan>();
			}
		}
		
		public System.Data.Linq.Table<NhanVien> NhanViens
		{
			get
			{
				return this.GetTable<NhanVien>();
			}
		}
		
		public System.Data.Linq.Table<PhanCong> PhanCongs
		{
			get
			{
				return this.GetTable<PhanCong>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CongTrinh")]
	public partial class CongTrinh : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MACT;
		
		private string _TENCT;
		
		private string _DIADIEM;
		
		private System.Nullable<System.DateTime> _NGAYCAPGP;
		
		private System.Nullable<System.DateTime> _NGAYKC;
		
		private System.Nullable<System.DateTime> _NGAYHT;
		
		private EntitySet<PhanCong> _PhanCongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMACTChanging(string value);
    partial void OnMACTChanged();
    partial void OnTENCTChanging(string value);
    partial void OnTENCTChanged();
    partial void OnDIADIEMChanging(string value);
    partial void OnDIADIEMChanged();
    partial void OnNGAYCAPGPChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYCAPGPChanged();
    partial void OnNGAYKCChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYKCChanged();
    partial void OnNGAYHTChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYHTChanged();
    #endregion
		
		public CongTrinh()
		{
			this._PhanCongs = new EntitySet<PhanCong>(new Action<PhanCong>(this.attach_PhanCongs), new Action<PhanCong>(this.detach_PhanCongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MACT", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MACT
		{
			get
			{
				return this._MACT;
			}
			set
			{
				if ((this._MACT != value))
				{
					this.OnMACTChanging(value);
					this.SendPropertyChanging();
					this._MACT = value;
					this.SendPropertyChanged("MACT");
					this.OnMACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENCT", DbType="NVarChar(20)")]
		public string TENCT
		{
			get
			{
				return this._TENCT;
			}
			set
			{
				if ((this._TENCT != value))
				{
					this.OnTENCTChanging(value);
					this.SendPropertyChanging();
					this._TENCT = value;
					this.SendPropertyChanged("TENCT");
					this.OnTENCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIADIEM", DbType="NVarChar(20)")]
		public string DIADIEM
		{
			get
			{
				return this._DIADIEM;
			}
			set
			{
				if ((this._DIADIEM != value))
				{
					this.OnDIADIEMChanging(value);
					this.SendPropertyChanging();
					this._DIADIEM = value;
					this.SendPropertyChanged("DIADIEM");
					this.OnDIADIEMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYCAPGP", DbType="Date")]
		public System.Nullable<System.DateTime> NGAYCAPGP
		{
			get
			{
				return this._NGAYCAPGP;
			}
			set
			{
				if ((this._NGAYCAPGP != value))
				{
					this.OnNGAYCAPGPChanging(value);
					this.SendPropertyChanging();
					this._NGAYCAPGP = value;
					this.SendPropertyChanged("NGAYCAPGP");
					this.OnNGAYCAPGPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYKC", DbType="Date")]
		public System.Nullable<System.DateTime> NGAYKC
		{
			get
			{
				return this._NGAYKC;
			}
			set
			{
				if ((this._NGAYKC != value))
				{
					this.OnNGAYKCChanging(value);
					this.SendPropertyChanging();
					this._NGAYKC = value;
					this.SendPropertyChanged("NGAYKC");
					this.OnNGAYKCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYHT", DbType="Date")]
		public System.Nullable<System.DateTime> NGAYHT
		{
			get
			{
				return this._NGAYHT;
			}
			set
			{
				if ((this._NGAYHT != value))
				{
					this.OnNGAYHTChanging(value);
					this.SendPropertyChanging();
					this._NGAYHT = value;
					this.SendPropertyChanged("NGAYHT");
					this.OnNGAYHTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CongTrinh_PhanCong", Storage="_PhanCongs", ThisKey="MACT", OtherKey="MACT")]
		public EntitySet<PhanCong> PhanCongs
		{
			get
			{
				return this._PhanCongs;
			}
			set
			{
				this._PhanCongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.CongTrinh = this;
		}
		
		private void detach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.CongTrinh = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhongBan")]
	public partial class PhongBan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAPB;
		
		private string _TENPB;
		
		private EntitySet<PhanCong> _PhanCongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAPBChanging(string value);
    partial void OnMAPBChanged();
    partial void OnTENPBChanging(string value);
    partial void OnTENPBChanged();
    #endregion
		
		public PhongBan()
		{
			this._PhanCongs = new EntitySet<PhanCong>(new Action<PhanCong>(this.attach_PhanCongs), new Action<PhanCong>(this.detach_PhanCongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAPB", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAPB
		{
			get
			{
				return this._MAPB;
			}
			set
			{
				if ((this._MAPB != value))
				{
					this.OnMAPBChanging(value);
					this.SendPropertyChanging();
					this._MAPB = value;
					this.SendPropertyChanged("MAPB");
					this.OnMAPBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENPB", DbType="NVarChar(20)")]
		public string TENPB
		{
			get
			{
				return this._TENPB;
			}
			set
			{
				if ((this._TENPB != value))
				{
					this.OnTENPBChanging(value);
					this.SendPropertyChanging();
					this._TENPB = value;
					this.SendPropertyChanged("TENPB");
					this.OnTENPBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhongBan_PhanCong", Storage="_PhanCongs", ThisKey="MAPB", OtherKey="MAPB")]
		public EntitySet<PhanCong> PhanCongs
		{
			get
			{
				return this._PhanCongs;
			}
			set
			{
				this._PhanCongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.PhongBan = this;
		}
		
		private void detach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.PhongBan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NhanVien")]
	public partial class NhanVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MANV;
		
		private string _HOTEN;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _PHAI;
		
		private string _DIACHI;
		
		private string _MAPB;
		
		private EntitySet<PhanCong> _PhanCongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMANVChanging(string value);
    partial void OnMANVChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnPHAIChanging(string value);
    partial void OnPHAIChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnMAPBChanging(string value);
    partial void OnMAPBChanged();
    #endregion
		
		public NhanVien()
		{
			this._PhanCongs = new EntitySet<PhanCong>(new Action<PhanCong>(this.attach_PhanCongs), new Action<PhanCong>(this.detach_PhanCongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANV", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MANV
		{
			get
			{
				return this._MANV;
			}
			set
			{
				if ((this._MANV != value))
				{
					this.OnMANVChanging(value);
					this.SendPropertyChanging();
					this._MANV = value;
					this.SendPropertyChanged("MANV");
					this.OnMANVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NVarChar(20)")]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="Date")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHAI", DbType="NVarChar(20)")]
		public string PHAI
		{
			get
			{
				return this._PHAI;
			}
			set
			{
				if ((this._PHAI != value))
				{
					this.OnPHAIChanging(value);
					this.SendPropertyChanging();
					this._PHAI = value;
					this.SendPropertyChanged("PHAI");
					this.OnPHAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(20)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAPB", DbType="NVarChar(20)")]
		public string MAPB
		{
			get
			{
				return this._MAPB;
			}
			set
			{
				if ((this._MAPB != value))
				{
					this.OnMAPBChanging(value);
					this.SendPropertyChanging();
					this._MAPB = value;
					this.SendPropertyChanged("MAPB");
					this.OnMAPBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_PhanCong", Storage="_PhanCongs", ThisKey="MANV", OtherKey="MANV")]
		public EntitySet<PhanCong> PhanCongs
		{
			get
			{
				return this._PhanCongs;
			}
			set
			{
				this._PhanCongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_PhanCongs(PhanCong entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhanCong")]
	public partial class PhanCong : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAPB;
		
		private string _MACT;
		
		private string _MANV;
		
		private string _SLNGAYCONG;
		
		private EntityRef<CongTrinh> _CongTrinh;
		
		private EntityRef<NhanVien> _NhanVien;
		
		private EntityRef<PhongBan> _PhongBan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAPBChanging(string value);
    partial void OnMAPBChanged();
    partial void OnMACTChanging(string value);
    partial void OnMACTChanged();
    partial void OnMANVChanging(string value);
    partial void OnMANVChanged();
    partial void OnSLNGAYCONGChanging(string value);
    partial void OnSLNGAYCONGChanged();
    #endregion
		
		public PhanCong()
		{
			this._CongTrinh = default(EntityRef<CongTrinh>);
			this._NhanVien = default(EntityRef<NhanVien>);
			this._PhongBan = default(EntityRef<PhongBan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAPB", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAPB
		{
			get
			{
				return this._MAPB;
			}
			set
			{
				if ((this._MAPB != value))
				{
					if (this._PhongBan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAPBChanging(value);
					this.SendPropertyChanging();
					this._MAPB = value;
					this.SendPropertyChanged("MAPB");
					this.OnMAPBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MACT", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MACT
		{
			get
			{
				return this._MACT;
			}
			set
			{
				if ((this._MACT != value))
				{
					if (this._CongTrinh.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMACTChanging(value);
					this.SendPropertyChanging();
					this._MACT = value;
					this.SendPropertyChanged("MACT");
					this.OnMACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANV", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MANV
		{
			get
			{
				return this._MANV;
			}
			set
			{
				if ((this._MANV != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMANVChanging(value);
					this.SendPropertyChanging();
					this._MANV = value;
					this.SendPropertyChanged("MANV");
					this.OnMANVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SLNGAYCONG", DbType="NVarChar(20)")]
		public string SLNGAYCONG
		{
			get
			{
				return this._SLNGAYCONG;
			}
			set
			{
				if ((this._SLNGAYCONG != value))
				{
					this.OnSLNGAYCONGChanging(value);
					this.SendPropertyChanging();
					this._SLNGAYCONG = value;
					this.SendPropertyChanged("SLNGAYCONG");
					this.OnSLNGAYCONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CongTrinh_PhanCong", Storage="_CongTrinh", ThisKey="MACT", OtherKey="MACT", IsForeignKey=true)]
		public CongTrinh CongTrinh
		{
			get
			{
				return this._CongTrinh.Entity;
			}
			set
			{
				CongTrinh previousValue = this._CongTrinh.Entity;
				if (((previousValue != value) 
							|| (this._CongTrinh.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CongTrinh.Entity = null;
						previousValue.PhanCongs.Remove(this);
					}
					this._CongTrinh.Entity = value;
					if ((value != null))
					{
						value.PhanCongs.Add(this);
						this._MACT = value.MACT;
					}
					else
					{
						this._MACT = default(string);
					}
					this.SendPropertyChanged("CongTrinh");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_PhanCong", Storage="_NhanVien", ThisKey="MANV", OtherKey="MANV", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.PhanCongs.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.PhanCongs.Add(this);
						this._MANV = value.MANV;
					}
					else
					{
						this._MANV = default(string);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhongBan_PhanCong", Storage="_PhongBan", ThisKey="MAPB", OtherKey="MAPB", IsForeignKey=true)]
		public PhongBan PhongBan
		{
			get
			{
				return this._PhongBan.Entity;
			}
			set
			{
				PhongBan previousValue = this._PhongBan.Entity;
				if (((previousValue != value) 
							|| (this._PhongBan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhongBan.Entity = null;
						previousValue.PhanCongs.Remove(this);
					}
					this._PhongBan.Entity = value;
					if ((value != null))
					{
						value.PhanCongs.Add(this);
						this._MAPB = value.MAPB;
					}
					else
					{
						this._MAPB = default(string);
					}
					this.SendPropertyChanged("PhongBan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
